var subclass = function(base) {
    var F = function() {},
        proto;

    F.prototype = base.prototype;
    proto = new F();

    this.super = function(obj, method) {
        return function() {
            var args = Array.prototype.slice.call(arguments);
            return base.prototype[method].apply(obj, args);
        };
    };
    this.prototype = proto;
};

var DBPrimitive = function(kwargs) {
    var self = this;
    Object.keys(kwargs).forEach(function(key) {
        self[key] = kwargs[key];
    });
};

DBPrimitive.prototype.toSQL = function(backend) {
    var primitive = new backend[this.name](this, backend);
    return primitive.toSQL();
};

var ResourceClause = function(resource) {
    this.name = 'ResourceClause';
    ResourceClause.super(this, 'constructor')({
        'resource':resource
    });
};

var SelectQuery = function(resource, fields, values, joins, filters, limits) {
    this.name = 'SelectQuery';
    SelectQuery.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field_clauses':fields,
        'value_clauses':[],
        'join_clauses':joins,
        'where_clauses':filters,
        'limit_clauses':limits
    });
};
subclass.call(SelectQuery, DBPrimitive);

var InsertQuery = function(resource, fields, values, joins, filters, limits) {
    this.name = 'InsertQuery';
    InsertQuery.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field_clauses':fields,
        'value_clauses':values,
        'join_clauses':joins,
        'where_clauses':filters,
        'limit_clauses':limits
    });
};
subclass.call(InsertQuery, DBPrimitive);

var UpdateQuery = function(resource, fields, joins, filters, limits) {
    this.name = 'UpdateQuery';
    UpdateQuery.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field_clauses':fields,
        'join_clauses':joins,
        'where_clauses':filters,
        'limit_clauses':limits
    });
};
subclass.call(UpdateQuery, DBPrimitive);

var DeleteQuery = function(resource, fields, joins, filters, limits) {
    this.name = 'DeleteQuery';
    DeleteQuery.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field_clauses':fields,
        'join_clauses':joins,
        'where_clauses':filters,
        'limit_clauses':limits
    });
};
subclass.call(DeleteQuery, DBPrimitive);

var JoinClause = function(from, to) {
    this.name = 'JoinClause';
    JoinClause.super(this, 'constructor')({
        'from_field':new FieldClause(from, from.rel.from_field),
        'to_field':new FieldClause(to, from.rel.to_field),
    });
};
subclass.call(JoinClause, DBPrimitive);

var FieldClause = function(resource, field, with_alias) {
    this.name = 'FieldClause';
    this.with_alias = with_alias ? true : false;
    FieldClause.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field':field,
    });
};
subclass.call(FieldClause, DBPrimitive);

var WhereClause = function(resource, field, value, filter) {
    this.name = 'WhereClause';
    WhereClause.super(this, 'constructor')({
        'resource':new ResourceClause(resource),
        'field':new FieldClause(resource, field),
        'value':value,
        'filter':filter
    });
};
subclass.call(WhereClause, DBPrimitive);

var LimitClause = function(limit, offset) {
    this.name = 'LimitClause';
    LimitClause.super(this, 'constructor')({
        'limit':limit,
        'offset':offset
    });
};
subclass.call(LimitClause, DBPrimitive);

var Query = function(resource) {
    this.resource = resource;
};

Query.prototype.copy = function() {
    var q = new Query(this.resource),
        self = this;
    Object.keys(this).forEach(function(key) {
        q[key] = self[key]; 
    });
    return q;
};

Query.prototype.filter = function(filters) {
    var q = this.copy();
    Object.keys(filters).forEach(function(key) {
        q._filters[key] = filters[key];
    });
    return q;
};

Query.prototype.all = function(callback) {
    var q = this.copy();
    if(!callback) {
        return function(callback) {
            q.all(callback);
        };
    } else {
        var query = q.compileFilters(SelectQuery); 
    }
};

Query.prototype.update = function(values, callback) {
    var q = this.copy();
    q._values = values;
    if(!callback) {
        return function(callback) {
            q.update(values, callback);
        };
    } else {
        var query = q.compileFilters(UpdateQuery); 
    }
};

Query.prototype.delete = function(callback) {
    var q = this.copy();
    if(!callback) {
        return function(callback) {
            q.delete(callback);
        };
    } else {
        var query = q.compileFilters(DeleteQuery); 
    }
};

Query.prototype.create = function(values, callback) {
    var q = this.copy();
    q._values = values;
    if(!callback) {
        return function(callback) {
            q.update(values, callback);
        };
    } else {
        var query = q.compileFilters(InsertQuery); 
    }
};

Query.prototype.compileFilters = function(parentKlass) {
    var self = this,
        filters = Object.keys(self._filters),
        splitFilters = filters.map(function(item) {
            var split = item.split(/__/g);
            if(split.length == 1 || !isFilter(splice.slice(-1)[0])) {
                split.push('exact');
            }
            return split;
        }),
        join_clauses = [],
        field_clauses = [],
        value_clauses = [],
        limit_clauses = [new LimitClause(self._offset, self._limit)],
        where_clauses = [],
        resources = [];
    splitFilters.forEach(function(item, index, arr, resource) {
        resource = resource || self.resource;
        if(resources.indexOf(resource) === -1) {
            resources.push(resource);
        }
        if(item.length > 2) {
            join_clauses.push(new JoinClause(resource, resource.prototype._meta.get_field_by_name(item[0]).rel.to_field.model));
            arguments.callee(item.slice(1), resource.prototype._meta.get_field_by_name(item[0]).rel.to_field.model, index, arr, resource);
        } else {
            where_clauses.push(new WhereClause(resource, resource.prototype._meta.get_field_by_name(items[0]), items[1], self._filters[arr.join('__')])); 
        }
    });
    resources.forEach(function(resource) {
        for(var key in resource.prototype._meta.fields) if(resource.hasOwnProperty(key)) {
            var field = resource.prototype._meta.get_field_by_name(key);
            if(field.isReal()) {
                field_clauses.push(new FieldClause(resource, field));
            }
        } 
    });

    Object.keys(self._values).forEach(function(key) {
        value_clauses.push(new ValueClause(self.resource, self.resource.get_field_by_name(key), self._values[key]));
    });

    return new parentKlass(self.resource,
        field_clauses,
        value_clauses,
        join_clauses,
        where_clauses,
        limit_clauses); 
};


