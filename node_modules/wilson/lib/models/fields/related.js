var base = require('wilson/models/fields/base');

var ForeignKey = base.Field.subclass({
    'initialize':function(to, kwargs) {
        this.related_name = kwargs.related_name || [this.model.model_name, 'set'].join('_');
        this.to = to instanceof models.Model ? to : this.resolve();
    },
    'contribToClass':function(model_proto) {
        model_proto[this.name] = this.createForwardRelation();
    },
    'getJSValue':function(instance, data) {
        var self = this;

        if(data instanceof Object) {
            var obj = this.to(data);
            instance[this.getColumnName()] = obj.pk;
            return function(callback) {
                callback(null, obj);
            };
        } else {
            instance[this.getColumnName()] = data;
            return function(callback) {
                self.to.objects.get({pk:data})(function(err, obj) {
                    if(!err) {
                        // cache the results so subsequent lookups
                        // don't have to hit the DB
                        instance[self.name] = function(callback) {
                            callback(err, obj);
                        };
                    }
                    callback(err, obj);
                });
            };
        }
    },
    'getBackendValue':function(instance) {
        return this.to._meta.getFieldByName('pk').getBackendValue({
            pk:instance[this.getColumnName()]
        });
    },
    'getDatabaseRepresentation':function(backend) {
        return this.to._meta.getFieldByName('pk').getDatabaseRepresentation(backend);
    },
    'resolve':function() {
        var self = this,
            resolveFunction = function(model) {
                self.to = model;
                model[self.related_name] = self.setupReverseRelation();
            },
            local = this.to.indexOf(':') === -1,
            split = this.to.split(':'),
            appInstance = local ? this.model.app_instance : application.getApplicationInstance(split[0]),
            modelName = local ? split[0] : split[1];

        appInstance.app.models[modelName].addResolver(local, resolveFunction);
    },
    'getColumn':function() {
        return [this.name, 'id'].join('_');
    },
    'setupReverseRelation':function() {
        this.to.model.addReverseRelation(this);
    }
});

exports.ForeignKey = ForeignKey;
