var base = require('wilson/models/fields/base');

var IntegerField = Field.subclass({
    'getJSValue':function(instance, data) {
        return parseInt(data, 10);
    },
    'validators':[
        function(value) {
            if(isNaN(parseInt(value, 10))) {
                throw new Error("Not a valid integer");
            }
        }
    ],
    'getDatabaseRepresentation':function(backend) {
        return backend.IntegerField;
    }
});

var PositiveIntegerField = Field.subclass({
    'getJSValue':IntegerField.prototype.getJSValue,
    'validators':IntegerField.prototype.validators.slice().concat([
        function(value) {
            if(parseInt(value) < 0) {
                throw new Error("Must be positive");
            }
        }
    ])
    'getDatabaseRepresentation':function(backend) {
        return backend.IntegerField;
    }
});

var AutoField = Field.subclass({
    'getJSValue':IntegerField.prototype.getJSValue,
    'validators':IntegerField.prototype.validators.slice()
    'getDatabaseRepresentation':function(backend) {
        return backend.IntegerField;
    }
});

var AliasField = Field.subclass({
    'initialize':function(kwargs) {
        this.aliased = kwargs.alias;
    },
    'getJSValue':function(instance, data) {
        return this.model._meta.getFieldByName(this.aliased).getJSValue(data);
    },
    'getColumn':function() {
        return this.model._meta.getFieldByName(this.aliased).getColumn();
    },
    'getDatabaseRepresentation':function(){}
});

var DateField = Field.subclass({
    'getJSValue':function(instance, data) {
        return new Date(Date.parse(data));
    },
    'getBackendValue':function(instance) {
        return instance[this.name].toString(); 
    },
    'getDatabaseRepresentation':function(backend) {
        return backend.DateField;
    }
});
