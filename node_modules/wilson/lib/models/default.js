var createPrimitive = function(toSQL) {
    var F = function(source, backend) {
        
    };
    F.prototype.toSQL = toSQL;
    return F;
};

var query = function() {
    var self = this,
        field_string = this.source.field_clauses.map(function(item) {
            return item.toSQL(self.backend);
        }).join(this.glue.fields),
        values_string = this.source.value_clauses.map(function(item) {
            return item.toSQL(self.backend);
        }).join(this.glue.values),
        where_string = this.source.where_clauses.map(function(item) {
            return item.toSQL(self.backend);
        }).join(this.glue.filters),
        join_string = this.source.join_clauses.map(function(item) {
            return item.toSQL(self.backend);
        }).join(this.glue.joins),
        limit_clauses = this.source.limit_clauses.map(function(item) {
            return item.toSQL(self.backend);
        }).join(this.glue.limits),
        table = this.source.resource.toSQL(self.backend);
    return {
        'fields':field_string,
        'where_string':where_string,
        'join_string':join_string,
        'table':table,
        'limit_clauses':limit_clauses
    };
};

exports.SelectQuery = createPrimitive(query);
exports.SelectQuery.prototype.glue = {
    'fields':', ',
    'filters':' AND ',
    'joins':' ',
    'values':' ',
    'limits':' '
};

exports.UpdateQuery = createPrimitive(query):
exports.UpdateQuery.prototype.glue = {
    'fields':', ',
    'filters':' AND ',
    'joins':' ',
    'values':' ',
    'limits':' '
};

exports.InsertQuery = createPrimitive(query):
exports.InsertQuery.prototype.glue = {
    'fields':', ',
    'filters':' AND ',
    'joins':' ',
    'values':' ',
    'limits':' '
};

exports.DeleteQuery = createPrimitive(query):
exports.DeleteQuery.prototype.glue = {
    'fields':', ',
    'filters':' AND ',
    'joins':' ',
    'values':' ',
    'limits':' '
};

exports.JoinClause = function(source, backend) {
    this.source = source;
    this.backend = backend;
};

exports.JoinClause.prototype.toSQL = function() {
    return 'INNER JOIN '+this.source.to.toSQL(this.backend)+' ON ('+
            this.source.from_field.toSQL(this.backend) + ' = ' +
            this.source.to_field.toSQL(this.backend) + ')'; 
};

exports.FieldClause = function(source, backend) {
    this.source = source;   
    this.backend = backend;
};

exports.FieldClause.prototype.toSQL = function() {
    var sql = '"'+[this.source.resource.toSQL(this.backend), this.source.field.name].join('"."')+'"';
    if(this.source.with_alias) {
        sql += ' AS '+this.getAlias();
    }
    return sql;
};

exports.FieldClause.prototype.getAlias = function() {
    return '"'+[this.source.resource.toSQL(this.backend), this.source.field.name].join('__')+'"';
};

exports.WhereClause = function(source, backend) {
    this.source = source;   
    this.backend = backend;
};

exports.WhereClause.prototype.toSQL = function() {
    var value = this.source.field.getDBPrepLookup(this.source.value, this.source.filter),
        value_and_field = this.backend.filters[this.source.filter](this.source.field.getAlias(), value);
    return value_and_field;
};

exports.LimitClause = function(source, backend) {
    this.source = source;
    this.backend = backend;
};

exports.LimitClause.prototype.toSQL = function() {
    var output = [];
    if(this.source.limit) { output.push(parseInt(this.source.limit, 10)); }
    if(this.source.offset) { output.shift(parseInt(this.source.offset, 10)); }
    return 'LIMIT '+output.join(',');
};

